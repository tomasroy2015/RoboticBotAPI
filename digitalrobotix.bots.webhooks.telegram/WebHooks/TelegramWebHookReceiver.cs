using System;
using System.Collections.Specialized;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks;
using Newtonsoft.Json.Linq;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace digitalrobotix.bots.webhooks.telegram
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Telegram. 
    /// </summary>
    public class TelegramWebHookReceiver : WebHookReceiver
    {
        private const string RecName = "Telegram";
        private const string CodeQueryParameter = "code";

        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override string Name
        {
            get { return RecName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            NameValueCollection queryParameters = request.RequestUri.ParseQueryString();
            string code = queryParameters[CodeQueryParameter];
            if (request.Method == HttpMethod.Post)
            {
                // Read the request entity body
                JObject data = await ReadAsJsonAsync(request);

                Update update = data.ToObject<Update>();

                System.Diagnostics.Trace.TraceInformation("Telegram bot's ({0}) message received: {1}", code, update.Message.Text);

                Bot bot = BotFactory.GetInstance().GetBot(code);
                if (bot != null)
                {
                    System.Diagnostics.Trace.TraceInformation("Send message to the Telegram bot ({0})", code);
                    await bot.Api.SendTextMessageAsync(update.Message.Chat.Id, string.Format("{0}: you sent message {1}", bot.Name, update.Message.Text));
                }
                return await ExecuteWebHookAsync(id, context, request, new string[] { "" }, data);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

    }
}
